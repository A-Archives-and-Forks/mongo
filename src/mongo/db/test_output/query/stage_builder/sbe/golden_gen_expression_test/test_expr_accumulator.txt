# Golden test output of GoldenGenExpressionTest/TestExprAccumulator
ExpressionFromAccumulator<AccumulatorAvg>
(avgOfArray(newArray(getField(s1, "bar"), 9.25L)) ?: null) 
# Golden test output of GoldenGenExpressionTest/TestExprAccumulator
ExpressionFromAccumulator<AccumulatorMax>

    let [
        l4.0 = getField(s1, "arr") 
    ] 
    in 
        if (typeMatch(l4.0, 1088) ?: true) 
        then null 
        elif isArray(l4.0) 
        then (maxOfArray(move(l4.0)) ?: null) 
        else move(l4.0) 

# Golden test output of GoldenGenExpressionTest/TestExprAccumulator
ExpressionFromAccumulator<AccumulatorMin>
(minOfArray(newArray(getField(s1, "bar"), 9.25L)) ?: null) 
# Golden test output of GoldenGenExpressionTest/TestExprAccumulator
ExpressionFromAccumulator<AccumulatorStdDevPop>

    let [
        l8.0 = getField(s1, "arr") 
    ] 
    in 
        if (typeMatch(l8.0, 1088) ?: true) 
        then null 
        elif isArray(l8.0) 
        then (stdDevPop(move(l8.0)) ?: null) 
        elif isNumber(move(l8.0)) 
        then 0 
        else null 

# Golden test output of GoldenGenExpressionTest/TestExprAccumulator
ExpressionFromAccumulator<AccumulatorStdDevSamp>

    let [
        l11.0 = 
            let [
                l12.0 = getField(s1, "arr") 
            ] 
            in 
                if (typeMatch(l12.0, 1088) ?: true) 
                then null 
                elif isArray(l12.0) 
                then (stdDevSamp(move(l12.0)) ?: null) 
                else null 
    ] 
    in 
        if (typeMatch(l11.0, 1088) ?: true) 
        then null 
        elif !(isNumber(l11.0)) 
        then fail(5155300, "$trunc only supports numeric types") 
        elif ((4 != trunc(4)) ?: true) 
        then fail(5155301, "$trunc requires "place" argument to be an integer between -20 and 100") 
        else trunc(move(l11.0), 4) 

# Golden test output of GoldenGenExpressionTest/TestExprAccumulator
ExpressionFromAccumulator<AccumulatorSum>
(sumOfArray(newArray(getField(s1, "bar"), 9.25L)) ?: null) 
